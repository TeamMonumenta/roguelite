//import Com_playmonumenta_plugins_ssh_gradle.*
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import net.ltgt.gradle.errorprone.CheckSeverity
import net.ltgt.gradle.errorprone.errorprone
import net.minecrell.pluginyml.bukkit.BukkitPluginDescription

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    `maven-publish`
    id("com.palantir.git-version") version "0.12.2"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("net.minecrell.plugin-yml.bukkit") version "0.5.1" // Generates plugin.yml
	//id("com.playmonumenta.plugins.ssh")
	id("net.ltgt.errorprone") version "3.1.0"
    id("net.ltgt.nullaway") version "1.3.0"
    checkstyle
}

repositories {
    mavenLocal()
    mavenCentral()
	maven("https://libraries.minecraft.net/")

    maven {
        url = uri("https://raw.githubusercontent.com/TeamMonumenta/monumenta-structure-management/master/mvn-repo/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }

    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
}

dependencies {
	compileOnly("io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT")
    compileOnly("com.playmonumenta:structures:10.0")

	errorprone("com.google.errorprone:error_prone_core:2.23.0")
	errorprone("com.uber.nullaway:nullaway:0.10.18")
}

group = "com.playmonumenta"
description = "roguelite"
val gitVersion: groovy.lang.Closure<String> by extra
version = gitVersion()

// Configure plugin.yml generation
bukkit {
    load = BukkitPluginDescription.PluginLoadOrder.POSTWORLD
    main = "com.monumenta.roguelite.Main"
    apiVersion = "1.19"
    name = "Roguelite"
    authors = listOf("Monumenta")
    depend = listOf("MonumentaStructureManagement")
    softDepend = listOf()
}

publishing {
    publications.create<MavenPublication>("maven") {
        project.shadow.component(this)
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/TeamMonumenta/roguelite")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8"

    // Set the release flag. This configures what version bytecode the compiler will emit, as well as what JDK APIs are usable.
    // See https://openjdk.java.net/jeps/247 for more information.
    options.release.set(17)

    options.compilerArgs.add("-Xmaxwarns")
    options.compilerArgs.add("10000")
    options.compilerArgs.add("-Xlint:deprecation")

	options.errorprone {
		option("NullAway:AnnotatedPackages", "com.playmonumenta")

		allErrorsAsWarnings.set(true)

		/*** Disabled checks ***/
		// These we almost certainly don't want
		check("InlineMeSuggester", CheckSeverity.OFF) // We won't keep deprecated stuff around long enough for this to matter
		check("CatchAndPrintStackTrace", CheckSeverity.OFF) // This is the primary way a lot of exceptions are handled
		check("FutureReturnValueIgnored", CheckSeverity.OFF) // This one is dumb and doesn't let you check return values with .whenComplete()
		check("ImmutableEnumChecker", CheckSeverity.OFF) // Would like to turn this on but we'd have to annotate a bunch of base classes
		check("LockNotBeforeTry", CheckSeverity.OFF) // Very few locks in our code, those that we have are simple and refactoring like this would be ugly
		check("StaticAssignmentInConstructor", CheckSeverity.OFF) // We have tons of these on purpose
		check("StringSplitter", CheckSeverity.OFF) // We have a lot of string splits too which are fine for this use
		check("MutablePublicArray", CheckSeverity.OFF) // These are bad practice but annoying to refactor and low risk of actual bugs
	}
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

val shadowJarTask by tasks.named<ShadowJar>("shadowJar")
/*
fun createRemote(name: String, p: Int): RemoteConfig {
	return remotes.create(name) {
		host = "admin-eu.playmonumenta.com"
		port = p
		user = "epic"
		knownHosts = allowAnyHosts
		auth = arrayOf(
			EnvKeyProvider(),
			SSHAgentKeyProvider(),
			OpenSSHProvider("id_ed25519"),
			OpenSSHProvider("id_rsa"),
			PageantKeyProvider()
		)
	}
}

fun configureDeployTask(name: String, config: Action<RunHandler>) {
	tasks.create(name) {
		group = "Deploy"
		dependsOn(shadowJarTask)
		doLast {
			ssh.run(config)
		}
	}
}

fun createNormalDeploy(ssh: RemoteConfig, name: String, vararg paths: String) {
	if (paths.isEmpty())
		throw IllegalArgumentException("paths must be non-empty")


	configureDeployTask("$name-deploy") {
		session(ssh) {
			for (path in paths)
				execute("cd $path && rm -f Monumenta*.jar")
			for (path in paths)
				put(shadowJarTask.archiveFile.get().asFile, path)
		}
	}
}

fun createSymlinkDeploy(ssh: RemoteConfig, name: String, vararg paths: String) {
	if (paths.isEmpty())
		throw IllegalArgumentException("paths must be non-empty")

	configureDeployTask("$name-deploy") {
		session(ssh) {
			for (path in paths)
				put(shadowJarTask.archiveFile.get().asFile, path);
			for (path in paths)
				execute("cd $path && rm -f Monumenta.jar && ln -s " + shadowJarTask.archiveFileName.get() + " Monumenta.jar")
		}
	}
}

val basicssh = createRemote("basicssh", 8822)
val adminssh = createRemote("adminssh", 9922)

for (i in 1..4) {
	createNormalDeploy(basicssh, "dev$i", "/home/epic/dev${i}_shard_plugins")
}

createNormalDeploy(basicssh, "futurama", "/home/epic/futurama_shard_plugins")
createNormalDeploy(basicssh, "mob", "/home/epic/mob_shard_plugins")
createSymlinkDeploy(adminssh, "m119", "/home/epic/project_epic/m119/plugins")
createSymlinkDeploy(adminssh, "build", "/home/epic/project_epic/server_config/plugins")
createSymlinkDeploy(basicssh, "stage", "/home/epic/stage/m13/server_config/plugins/")
createSymlinkDeploy(
	adminssh, "volt",
	"/home/epic/volt/m12/server_config/plugins",
	"/home/epic/volt/m13/server_config/plugins",
)
createSymlinkDeploy(
	adminssh, "play",
	"/home/epic/play/m12/server_config/plugins",
	"/home/epic/play/m13/server_config/plugins",
	"/home/epic/play/m17/server_config/plugins"
)
*/
